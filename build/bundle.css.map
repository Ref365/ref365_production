{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../AllEvents.svelte",
    "../../Dashboard.svelte",
    "../../HomeScreen.svelte",
    "../../MonthIncomeChart.svelte",
    "../../NavBar.svelte",
    "../../NewEventForm.svelte",
    "../../TotalIncomeChart.svelte",
    "../../TotalMileageChart.svelte",
    "../../UpcomingEvents.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport NavBar from './components/NavBar.svelte'\n\timport NewEventForm from './components/NewEventForm.svelte'\n\timport UpcomingEvents from './components/UpcomingEvents.svelte'\n\timport Dashboard from './components/Dashboard.svelte'\n\timport HomeScreen from './components/HomeScreen.svelte'\n\timport AllEvents from './components/AllEvents.svelte'\n\t// export let name;\n\timport { Router, Link, Route } from \"svelte-routing\";\n\texport let url = '';\n\timport ApolloClient from \"apollo-boost\";\n\timport { setClient } from \"svelte-apollo\";\n\n\t// apollo set up\n\n\tconst client = new ApolloClient({\n\t\turi: \"https://ref365-be.herokuapp.com/graphql\",\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log(\"graphQLErrors\", graphQLErrors);\n      console.log(\"networkError\", networkError);\n    }\n\t});\n\n  setClient(client);\n\n</script>\n\n<Router url={url}>\n\t<main>\n\t\t<NavBar />\n\t\t<Route path='/' component={HomeScreen} />\n\t\t<Route path='add-event' component={NewEventForm} />\n\t\t<Route path='dashboard' component={Dashboard} />\n\t\t<Route path='all-events' component={AllEvents} />\n\t</main>\n</Router>\n\n<style>\n  @import url('https://fonts.googleapis.com/css2?family=Do+Hyeon&display=swap');\n  * {\n\t\tfont-family: 'Do Hyeon', sans-serif;\n\t\tbackground-color: black;\n\t}\n\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n\n</style>\n",
    "<script>\n  import ApolloClient from \"apollo-boost\";\n  import { gql } from \"apollo-boost\";\n  import { setClient, getClient, mutate, query } from \"svelte-apollo\";\n  let userId = 1;\n\n  const client = getClient();\n  const GETEVENTS = gql`\n      {\n        user(id: ${userId}) {\n          events {\n            title\n            dateTime\n            date\n            id\n            notes\n            income\n            mileage\n          }\n        }\n      }\n    `;\n const eventQuery = query(client, {query: GETEVENTS});\n\n  let sortedEvents = [];\n  const sortEvents = (events) => {\n   sortedEvents = events.sort((a,b) => new Date(b.dateTime) - new Date(a.dateTime));\n }\n\n  const convertToReadable = (date) => {\n   let splitDate = date.split('')\n   let formattedDate = splitDate.slice(0,10).join('')\n   let longDate = new Date(formattedDate)\n  return longDate.toString().split('').slice(0, 15).join('')\n } \n\n  const DELETEEVENT = gql`\n    mutation(\n      $eventId: ID!\n    ){\n      deleteEvent(input: {\n      eventId: $eventId\n    }) {\n    status\n  }}\n  `;\n\n  const deleteEvent = (eventId) => {\n    const eventDelete = mutate(client, {\n      mutation: DELETEEVENT,\n      variables: {\n        eventId\n      }\n    })\n    .then(res => {\n      eventQuery.refetch();\n    })\n    .catch(e => {\n      console.log('error:', e)\n    })\n  }\n\n   const displayEventDetails = event => {\n    let selectedCard = document.querySelector(`#event-${event.id}`)\n    selectedCard.classList.toggle('hidden');\n  }\n</script>\n\n\n<section>\n  <h1>All Events</h1>\n  {#await $eventQuery}\n    <p>...loading</p>\n  {:then data}\n  <p class='hidden'>{sortEvents(data.data.user.events)}</p>\n  <section class='card-section'>\n  {#each sortedEvents as event, i}\n    <section class='event-card'>\n      <button class='show-details-btn' on:click={displayEventDetails(event)}>Show Event Details</button>\n      <p class='event-title'>{event.title}</p>\n      <p>{convertToReadable(event.dateTime)}</p>\n      <div class='expanded-details hidden' id={`event-${event.id}`}>\n        <p>Notes: {event.notes}</p>\n        <p>${event.income}</p>\n        <p>{event.mileage} miles</p>\n      </div>\n      <button on:click={deleteEvent(event.id)}>Delete Event</button>\n    </section>\n    {/each}\n  </section>\n  {/await}\n</section>\n\n\n<style>\n  .card-section {\n    margin-top: 0;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n   align-items: center;\n   justify-content: center;\n   color: white;\n   height: 100vh;\n\n  }\n\n  h1 {\n    color: white;\n    font-size: 3rem;\n  }\n  .hidden {\n    display: none;\n  }\n\n  .show-details-btn {\n    background-color: grey;\n    color: white;\n    font-size: 1rem;\n    margin-left: 60%;\n    margin-top: 2%;\n    cursor: pointer;\n    /* width: 20%; */\n  }\n  .event-card {\n    display: flex;\n    flex-direction: column;\n    border: 3px solid yellow;\n    background-color: black;\n    border-radius: 5%;\n    /* height: 20%; */\n    margin: 1rem;\n    color: white;\n    font-size: 1.2rem;\n    padding: 1.5rem;\n  }\n  .hidden {\n    display: none;\n  }\n\n  button {\n    cursor: pointer;\n     background-color: orange;\n    border: none;\n  }\n</style>",
    "<script>\n  import ApolloClient from \"apollo-boost\";\n  import { gql } from \"apollo-boost\";\n  import { setClient, getClient, mutate, query } from \"svelte-apollo\";\n  import TotalIncomeChart from './TotalIncomeChart.svelte';\n  import TotalMileageChart from './TotalMileageChart.svelte';\n  import MonthIncomeChart from './MonthIncomeChart.svelte'\n\n  let userId = 1;\n  const client = getClient();\n  const GETALLMILEAGE = gql`\n      {\n        user(id: ${userId}) {\n          events {\n            mileage\n            dateTime\n          }\n        }\n      }\n    `;\n\n  const GETALLINCOME = gql`\n      {\n        user(id: ${userId}) {\n          events {\n            income\n            dateTime\n          }\n        }\n      }\n    `;\n\n\n  const incomeQuery = query(client, {query: GETALLINCOME});\n  const mileageQuery = query(client, {query: GETALLMILEAGE});\n\n\n  let totalData = 0;\n  const getTotalData = (events, type) => {\n    totalData = events.reduce((acc, event) => {\n      return acc + event[type];\n    }, 0);\n    return totalData;\n  };\n\n  const getDataToDate = (events, type) => {\n    let date = new Date();\n    let currentYear = date.getFullYear();\n    let yearBegin = new Date(currentYear, 0, 1).getTime();\n    let eventsToDate = events.filter(event => {\n      let date = new Date(event.dateTime);\n      let milliseconds = date.getTime();\n      return (milliseconds > yearBegin) && (milliseconds < Date.now());\n    });\n    let dataToDate = eventsToDate.reduce((acc, event) => {\n      return acc + event[type];\n    }, 0);\n    return dataToDate;\n  };\n\n  const getPreviousYearData = (events, type) => {\n    let date = new Date();\n    let currentYear = date.getFullYear();\n    let previousYear = currentYear - 1;\n    let prevYearData = events.filter(event => {\n      let eventYear = new Date(event.dateTime).getFullYear();\n      return eventYear === previousYear;\n    });\n    let prevYearTotal = prevYearData.reduce((acc, event) => {\n      return acc + event[type];\n    }, 0);\n    return prevYearTotal;\n  };\n\n</script>\n\n<section class='dashboard-main'>\n  <h1>Dashboard</h1>\n  {#await $incomeQuery}\n  <p>...loading</p>\n  {:then data}\n  <section class='data-cards-section'>\n    <div class='total-income data-card'>\n      <h3>Total Income</h3>\n      <h2>{`$${getTotalData(data.data.user.events, 'income')}`}</h2>\n    </div>\n    <div class='income-to-date data-card'>\n      <h3>Year-to-Date Income</h3>\n      <h2>{`$${getDataToDate(data.data.user.events, 'income')}`}</h2>\n    </div>\n    <div class='previous-year-income data-card'>\n      <h3>Last Year's Income</h3>\n      <h2>{`$${getPreviousYearData(data.data.user.events, 'income')}`}</h2>\n    </div>\n  </section>\n   <section class='income-chart-section'>\n      <TotalIncomeChart totalIncome={getTotalData(data.data.user.events, 'income')}\n             yearToDateIncome={getDataToDate(data.data.user.events, 'income')}\n             lastYearIncome={getPreviousYearData(data.data.user.events, 'income')}\n      />\n      <!-- this component below needs to be finished but it represents a line graph of month to month income -->\n      <!-- <MonthIncomeChart allEvents={data.data.user.events}/> -->\n  </section>\n    {:catch e}\n    {/await}\n    \n  {#await $mileageQuery}\n  <p>...loading</p>\n  {:then data}\n  <section class='data-cards-section'>\n    <div class='total-mileage data-card'>\n      <h3>Total Mileage</h3>\n      <h2>{`${getTotalData(data.data.user.events, 'mileage')} miles`}</h2>\n    </div>\n    <div class='mileage-to-date data-card'>\n      <h3>Year-to-Date Mileage</h3>\n      <h2>{`${getDataToDate(data.data.user.events, 'mileage')} miles`}</h2>\n    </div>\n    <div class='previous-year-mileage data-card'>\n      <h3>Last Year's Mileage</h3>\n      <h2>{`${getPreviousYearData(data.data.user.events, 'mileage')} miles`}</h2>\n    </div>\n  </section>\n   <section class='mileage-chart-section'>\n      <TotalMileageChart totalMileage={getTotalData(data.data.user.events, 'mileage')}\n             yearToDateMileage={getDataToDate(data.data.user.events, 'mileage')}\n             lastYearMileage={getPreviousYearData(data.data.user.events, 'mileage')}\n      />\n  </section>\n    {:catch e}\n    {/await}\n\n</section>\n\n\n\n<style>\n  * {\n    color: white;\n  }\n\n  .income-chart-section {\n    /* height: 30%; */\n    /* border: 5px solid green; */\n  }\n  .dashboard-main {\n    /* height: 100vh; */\n  }\n\n  h1 {\n    font-size: 3rem;\n  }\n  .data-cards-section {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n  }\n\n  .data-card {\n    border: 2px solid yellow;\n    padding: 1rem;\n    width: 15%;\n    margin-bottom: 2rem;\n  }\n\n  h3 {\n    font-size: 2rem;\n  }\n\n  h2 {\n    font-size: 1.8rem;\n    border-bottom: 2px solid grey;\n  }\n</style>\n",
    "<section>\n  <h1>Welcome to REF365</h1>\n  <h2>The Referee's tool for scheduling, keeping track of your traveled miles, and tracking your income. </h2>\n  <h4>To view your upcoming events and add new ones, select the 'Add New Event' button in the navigation bar.</h4> \n  <h4>Navigate to the Dashboard to see your income and mileage data.</h4>\n</section>\n\n\n<style>\n  section {\n    height: 100vh;\n  }\n  h1 {\n    color: white;\n    text-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n  }\n  h2 {\n    color: orange;\n    font-size: 3rem;\n  }\n  h4 {\n    color: white;\n    font-size: 2rem;\n  }\n</style>",
    "<script>\nimport {onMount} from 'svelte';\nimport Chart from 'chart.js';\n// export let totalMileage;\n// export let yearToDateMileage;\n// export let lastYearMileage;\nexport let allEvents;\nconsole.log(allEvents);\n// need to sort these by year to date and last year to compare this year's monthly income to last\n// could create arrays containing the montly income for previous year and current year to date\n  const sortByMonth = (events) => {\n      console.log(events[0].dateTime)\n      console.log(new Date(events[0].dateTime).getMonth())\n      event.forEach(event => {\n          if ((new Date(event.dateTime).getMonth() + 1) === 4) {\n              console.log('april')\n          }\n      })\n  }\n\n  sortByMonth(allEvents)\n\n  const getDataToDate = (events, type) => {\n    let date = new Date();\n    let currentYear = date.getFullYear();\n    let yearBegin = new Date(currentYear, 0, 1).getTime();\n    let eventsToDate = events.filter(event => {\n      let date = new Date(event.dateTime);\n      let milliseconds = date.getTime();\n      return (milliseconds > yearBegin) && (milliseconds < Date.now());\n    });\n    console.log('eventsToDate:', eventsToDate)\n    // let dataToDate = eventsToDate.reduce((acc, event) => {\n    //   return acc + event[type];\n    // }, 0);\n    // return dataToDate;\n  };\n\n//   getDataToDate(allEvents, 'income')\n\n\n\n// function createChart() {\n  \n//   var ctx = document.getElementById('myChart');\n//   Chart.defaults.global.defaultFontSize = 22;\n//   Chart.defaults.global.defaultFontFamily = 'Arial';\n//   Chart.defaults.global.defaultFontColor = 'white';\n\n\n//   var myChart = new Chart(ctx, {\n//       type: 'line',\n//       data: {\n//           labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'August', 'Sep', 'Oct', 'Nov', 'Dec'],\n//           datasets: [{\n//               label: 'Income Trends:',\n//               data: [14,54,34],\n//               backgroundColor: [\n//                   'rgba(255, 99, 132, 0.2)',\n//                   'rgba(54, 162, 235, 0.2)',\n//                   'rgba(255, 206, 86, 0.2)',\n//                   'rgba(75, 192, 192, 0.2)',\n//                   'rgba(153, 102, 255, 0.2)',\n//                   'rgba(255, 159, 64, 0.2)'\n//               ],\n//               borderColor: [\n//                   'rgba(255, 99, 132, 1)',\n//                   'rgba(54, 162, 235, 1)',\n//                   'rgba(255, 206, 86, 1)',\n//                   'rgba(75, 192, 192, 1)',\n//                   'rgba(153, 102, 255, 1)',\n//                   'rgba(255, 159, 64, 1)'\n//               ],\n//               borderWidth: 2\n//           }]\n//       },\n//       options: {\n//           scales: {\n//               yAxes: [{\n//                   ticks: {\n//                       beginAtZero: true\n//                   }\n//               }]\n//           }\n//       }\n//   });\n// }\n\n// onMount(createChart)\n</script>\n\n<section>\n  <canvas id=\"myChart\" ></canvas>\n</section>\n\n<style>\n\n  canvas {\n\n  }\n\n  section {\n    border: 5px solid grey;\n    margin-bottom: 2rem;\n  }\n</style>\n\n\n",
    "<script>\n  import { Router, Link, Route, link } from \"svelte-routing\";\n\n</script>\n\n\n<nav>\n  <a href='/' use:link class='home-btn'>REF365</a>\n  <a href='add-event' use:link class='new-event-btn' >Add New Event</a>\n  <a href='dashboard' use:link class='dashboard-btn' >Dashboard</a>\n\n</nav>\n\n<style>\n  nav {\n    border: 2px solid yellow;\n    background-color: black;\n    border-radius: 1rem;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem;\n  }\n  \n  a {\n    color: white;\n    text-decoration: none;\n    font-size: 1.4rem;\n    border-radius: 5%;\n  }\n\n  .new-event-btn,\n  .dashboard-btn {\n    padding: 12px;\n    border: 2px solid grey;\n  }\n\n  .home-btn {\n    font-size: 3rem;\n    padding: 10px;\n    margin-left: 2%;\n  }\n  a:hover {\n    border-bottom: 2px solid white;\n    }\n  \n</style>\n",
    "<script>\n// imports\n  import ApolloClient from \"apollo-boost\";\n  import { gql } from \"apollo-boost\";\n  import { setClient, getClient, mutate, query } from \"svelte-apollo\";\n  import UpcomingEvents from './UpcomingEvents.svelte'\n// component variables and props\n  let title;\n  let notes;\n  let date;\n  let time;\n  let mileage;\n  let payment;\n  let userId = 1;\n  let errors = {\n    formValid: true,\n    goodPost: true,\n  }\n  let messages = {\n    successfulPost: false\n  }\n// methods\n  const client = getClient();\n   const GETEVENTS = gql`\n      {\n        user(id: ${userId}) {\n          events {\n            title\n            dateTime\n            date\n            id\n            notes\n            income\n            mileage\n          }\n        }\n      }\n    `;\n const eventQuery = query(client, {query: GETEVENTS});\n\n  const ADDEVENT = gql`\n    mutation($title: String!,\n             $userId: ID!,\n             $notes: String!,\n             $date: String!,\n             $time: String!,\n             $payment: Float!\n             $mileage: Float!,\n              ){\n      createEvent(input: {\n        userId: $userId,\n        title: $title,\n        notes: $notes,\n        date: $date,\n        time: $time,\n        mileage: $mileage,\n        income: $payment\n      }) {\n        event {\n           id\n           title\n           notes\n           date\n           time\n           mileage\n           income\n        }\n      }\n}\n  `;\n\n  const addEvent = () => {\n   const eventAdd = mutate(client, {\n      mutation: ADDEVENT,\n      variables: {\n        userId,\n        title,\n        notes,\n        date,\n        time,\n        mileage,\n        payment\n      }\n    })\n      .then(data => {\n        console.log(data)\n        title = '';\n        notes = ''\n        date = null;\n        time = null;\n        mileage = null;\n        payment = null;\n        messages.successfulPost = true;\n        eventQuery.refetch();\n      })\n      .catch(e => {\n        console.error('error:', e);\n        errors.goodPost = false;\n      });\n  }\n\n  const validateForm = () => {\n    if (title && notes && date && time && mileage && payment) {\n      errors.formValid = true;\n      addEvent()\n    } else {\n      errors.formValid = false;\n    }\n  }\n\n</script>\n\n<section>\n  <form on:submit|preventDefault={validateForm}>\n    <h2>Add New Event</h2>\n    {#if !errors.formValid}\n      <p>Please make sure all fields are filled out.</p>\n    {/if}\n     {#if !errors.goodPost}\n      <p>We're sorry, there was an error creating your event. Please try again soon.</p>\n    {/if}\n    <label for='event-title'>Event Title</label>\n      <input bind:value={title} class='event-title' type='text'>\n    <label for='mileage'>Mileage</label>\n      <input bind:value={mileage} type='number' min='0' oninput=\"validity.valid||(value='');\" step='any' >\n    <label for='date'>Date & Time</label>\n      <input bind:value={date} class='date' type='date'>\n      <input bind:value={time} type='time' >\n    <label for='payment'>Payment</label>\n      <input bind:value={payment} placeholder='$' min='0' oninput=\"validity.valid||(value='');\" step='any' class='payment' type='number' >\n    <label for='notes'>Notes</label>\n      <textarea class='notes-input' bind:value={notes} type='text' rows=\"5\" cols=\"33\"></textarea>\n    <button>Create New Event</button>\n  </form>\n  <div>\n    {#if messages.successfulPost}\n      <p class='happy-message'>Event created!</p>\n    {/if}\n    <UpcomingEvents eventQuery={eventQuery}/>\n  </div>\n</section>\n\n\n<style>\n  section {\n    display: flex;\n    height: 100vh;\n  }\n  h2 {\n    font-size: 2rem;\n    color: white;\n  }\n  form {\n    border-right: 3px solid black;\n    width: 50%;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: column;\n  }\n\n  input,\n  textarea {\n    border: .1rem solid black;\n    width: 60%;\n    height: 3rem;\n    margin-top: 5px;\n  }\n  div {\n    width: 50%;\n  }\n\n  p {\n    color: red;\n    font-size: 2rem;\n  }\n\n  .happy-message {\n    color: yellow;\n    font-size: 2rem;\n  }\n\n  .notes-input {\n    height: 6rem;\n  }\n\n  label {\n    width: 60%;\n    font-size: 1.5rem;\n    color: white;\n\n  }\n\n  button {\n    width: 60%;\n    cursor: pointer;\n    border: none;\n    border-radius: 5%;\n    background-color: yellow;\n    margin-top: 2rem;\n    padding: 1rem;\n    font-size: 1.65rem;\n  }\n</style>\n",
    "<script>\nimport {onMount} from 'svelte';\nimport Chart from 'chart.js';\nexport let totalIncome;\nexport let yearToDateIncome;\nexport let lastYearIncome;\n\nfunction createChart() {\n  \n  var ctx = document.getElementById('myChart');\n  Chart.defaults.global.defaultFontSize = 22;\n  Chart.defaults.global.defaultFontFamily = 'Arial';\n  Chart.defaults.global.defaultFontColor = 'white';\n\n\n  var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n          labels: ['All-Time', 'Year-To-Date', 'Last Year'],\n          datasets: [{\n              label: 'Income Data:',\n              data: [totalIncome, yearToDateIncome, lastYearIncome],\n              backgroundColor: [\n                  'rgba(255, 99, 132, 0.2)',\n                  'rgba(54, 162, 235, 0.2)',\n                  'rgba(255, 206, 86, 0.2)',\n                  'rgba(75, 192, 192, 0.2)',\n                  'rgba(153, 102, 255, 0.2)',\n                  'rgba(255, 159, 64, 0.2)'\n              ],\n              borderColor: [\n                  'rgba(255, 99, 132, 1)',\n                  'rgba(54, 162, 235, 1)',\n                  'rgba(255, 206, 86, 1)',\n                  'rgba(75, 192, 192, 1)',\n                  'rgba(153, 102, 255, 1)',\n                  'rgba(255, 159, 64, 1)'\n              ],\n              borderWidth: 2\n          }]\n      },\n      options: {\n          scales: {\n              yAxes: [{\n                  ticks: {\n                      beginAtZero: true\n                  }\n              }]\n          }\n      }\n  });\n}\n\nonMount(createChart)\n</script>\n\n<section>\n  <canvas id=\"myChart\" ></canvas>\n</section>\n\n<style>\n\n  canvas {\n\n  }\n\n  section {\n    border: 5px solid grey;\n    margin-bottom: 2rem;\n  }\n</style>\n\n\n",
    "<script>\nimport {onMount} from 'svelte';\nimport Chart from 'chart.js';\nexport let totalMileage;\nexport let yearToDateMileage;\nexport let lastYearMileage;\n\nfunction createChart() {\n  \n  var ctx = document.getElementById('myChart');\n  Chart.defaults.global.defaultFontSize = 22;\n  Chart.defaults.global.defaultFontFamily = 'Arial';\n  Chart.defaults.global.defaultFontColor = 'white';\n\n\n  var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n          labels: ['All-Time', 'Year-To-Date', 'Last Year'],\n          datasets: [{\n              label: 'Mileage Data:',\n              data: [totalMileage, yearToDateMileage, lastYearMileage],\n              backgroundColor: [\n                  'rgba(255, 99, 132, 0.2)',\n                  'rgba(54, 162, 235, 0.2)',\n                  'rgba(255, 206, 86, 0.2)',\n                  'rgba(75, 192, 192, 0.2)',\n                  'rgba(153, 102, 255, 0.2)',\n                  'rgba(255, 159, 64, 0.2)'\n              ],\n              borderColor: [\n                  'rgba(255, 99, 132, 1)',\n                  'rgba(54, 162, 235, 1)',\n                  'rgba(255, 206, 86, 1)',\n                  'rgba(75, 192, 192, 1)',\n                  'rgba(153, 102, 255, 1)',\n                  'rgba(255, 159, 64, 1)'\n              ],\n              borderWidth: 2\n          }]\n      },\n      options: {\n          scales: {\n              yAxes: [{\n                  ticks: {\n                      beginAtZero: true\n                  }\n              }]\n          }\n      }\n  });\n}\n\nonMount(createChart)\n</script>\n\n<section>\n  <canvas id=\"myChart\" ></canvas>\n</section>\n\n<style>\n\n  canvas {\n\n  }\n\n  section {\n    border: 5px solid grey;\n    margin-bottom: 2rem;\n  }\n</style>\n\n\n",
    "<script>\n  import ApolloClient from \"apollo-boost\";\n  import { gql } from \"apollo-boost\";\n  import { setClient, getClient, mutate, query } from \"svelte-apollo\";\n  import { Router, Link, Route, link } from \"svelte-routing\";\n  let userId = 1;\n\n  export let eventQuery;\n\n  const client = getClient();\n\n let sortedEvents = [];\n let firstFive = [];\n\n const sortEvents = (events) => {\n   sortedEvents = events.sort((a,b) => new Date(b.dateTime) - new Date(a.dateTime));\n   if (sortedEvents.length > 6) {\n     firstFive = sortedEvents.slice(0, 5)\n   } else {\n     firstFive = sortedEvents;\n   }\n }\n\n const convertToReadable = (date) => {\n   let splitDate = date.split('')\n   let formattedDate = splitDate.slice(0,10).join('')\n  let longDate = new Date(formattedDate)\n  return longDate.toString().split('').slice(0, 15).join('')\n } \n\n     const DELETEEVENT = gql`\n    mutation(\n      $eventId: ID!\n    ){\n      deleteEvent(input: {\n      eventId: $eventId\n    }) {\n    status\n  }}\n  `;\n\n  const deleteEvent = (eventId) => {\n    const eventDelete = mutate(client, {\n      mutation: DELETEEVENT,\n      variables: {\n        eventId\n      }\n    })\n    .then(res => {\n      eventQuery.refetch();\n    })\n    .catch(e => {\n      console.log('error:', e)\n    })\n  }\n\n  const displayEventDetails = event => {\n    let selectedCard = document.querySelector(`#event-${event.id}`)\n    selectedCard.classList.toggle('hidden');\n  }\n\n</script>\n\n<section class='card-container'>\n  <h2>Your Upcoming Events</h2>\n  <a href='/all-events' use:link class='view-all-btn'>View All Events</a>\n   {#await $eventQuery}\n    <p>.. loading</p>\n  {:then data}\n\n  <p class='hidden'>{sortEvents(data.data.user.events)}</p>\n\n    {#each firstFive as event, i}\n    <section class='event-card'>\n    <button class='show-details-btn' on:click={displayEventDetails(event)}>Show Event Details</button>\n      <p class='event-title'>{event.title}</p>\n      <p>{convertToReadable(event.dateTime)}</p>\n      <div class='expanded-details hidden' id={`event-${event.id}`}>\n        <p>Notes: {event.notes}</p>\n        <p>${event.income}</p>\n        <p>{event.mileage} miles</p>\n      </div>\n      <button on:click={deleteEvent(event.id)}>Delete Event</button>\n    </section>\n    {/each}\n\n  {:catch e}\n    {e}\n  {/await}\n</section>\n\n<style>\n  .card-container {\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   color: white;\n   /* overflow: auto;\n   height: 100vh; */\n  }\n\n  h2 {\n    font-size: 2rem;\n  }\n\n  .view-all-btn {\n    color: orange;\n    padding: 5px;\n    font-size: 2rem;\n    text-decoration: none;\n    /* border-left: 2px solid white;\n    border-right: 2px solid white; */\n\n  }\n  .event-card {\n    border: 3px solid yellow;\n    background-color: black;\n    border-radius: 5%;\n    width: 75%;\n    margin: 1rem;\n    color: white;\n    font-size: 1.2rem;\n    padding-bottom: .5rem;\n  }\n  .hidden {\n    display: none;\n  }\n\n  .show-details-btn {\n    background-color: grey;\n    color: white;\n    font-size: 1rem;\n    margin-left: 60%;\n    margin-top: 2%;\n    cursor: pointer;\n    /* width: 20%; */\n  }\n\n  button {\n    cursor: pointer;\n    background-color: orange;\n    border: none;\n  }\n\n</style>\n"
  ],
  "names": [],
  "mappings": "AAsCE,QAAQ,IAAI,gEAAgE,CAAC,CAAC,AAC9E,eAAE,CAAC,AACH,WAAW,CAAE,UAAU,CAAC,CAAC,UAAU,CACnC,gBAAgB,CAAE,KAAK,AACxB,CAAC,AAED,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;ACwCA,aAAa,eAAC,CAAC,AACb,UAAU,CAAE,CAAC,CACb,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,SAAS,CAAE,IAAI,CAChB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,AAEd,CAAC,AAED,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,IAAI,AACf,CAAC,AAED,iBAAiB,eAAC,CAAC,AACjB,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,EAAE,CACd,MAAM,CAAE,OAAO,AAEjB,CAAC,AACD,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CACxB,gBAAgB,CAAE,KAAK,CACvB,aAAa,CAAE,EAAE,CAEjB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,MAAM,CACjB,OAAO,CAAE,MAAM,AACjB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,IAAI,AACf,CAAC,AAED,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,OAAO,CACd,gBAAgB,CAAE,MAAM,CACzB,MAAM,CAAE,IAAI,AACd,CAAC;ACPD,cAAE,CAAC,AACD,KAAK,CAAE,KAAK,AACd,CAAC,AAUD,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,mBAAmB,cAAC,CAAC,AACnB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,YAAY,CAC7B,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,UAAU,cAAC,CAAC,AACV,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CACxB,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,GAAG,CACV,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,MAAM,CACjB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC/B,CAAC;ACnKD,OAAO,eAAC,CAAC,AACP,MAAM,CAAE,KAAK,AACf,CAAC,AACD,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,CACZ,cAAc,CAAE,SAAS,CAC3B,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAChB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,MAAM,CACb,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,IAAI,AACjB,CAAC;AC4ED,OAAO,eAAC,CAAC,AACP,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,IAAI,AACrB,CAAC;AC1FD,GAAG,cAAC,CAAC,AACH,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CACxB,gBAAgB,CAAE,KAAK,CACvB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,IAAI,AACf,CAAC,AAED,CAAC,cAAC,CAAC,AACD,KAAK,CAAE,KAAK,CACZ,eAAe,CAAE,IAAI,CACrB,SAAS,CAAE,MAAM,CACjB,aAAa,CAAE,EAAE,AACnB,CAAC,AAED,4BAAc,CACd,cAAc,cAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACxB,CAAC,AAED,SAAS,cAAC,CAAC,AACT,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,EAAE,AACjB,CAAC,AACD,eAAC,MAAM,AAAC,CAAC,AACP,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAC9B,CAAC;ACmGH,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,KAAK,AACf,CAAC,AACD,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,AACd,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAC7B,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,UAAU,CAC3B,WAAW,CAAE,MAAM,CACnB,cAAc,CAAE,MAAM,AACxB,CAAC,AAED,mBAAK,CACL,QAAQ,cAAC,CAAC,AACR,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CACzB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,GAAG,AACjB,CAAC,AACD,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,GAAG,AACZ,CAAC,AAED,CAAC,cAAC,CAAC,AACD,KAAK,CAAE,GAAG,CACV,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,cAAc,cAAC,CAAC,AACd,KAAK,CAAE,MAAM,CACb,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,YAAY,cAAC,CAAC,AACZ,MAAM,CAAE,IAAI,AACd,CAAC,AAED,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,GAAG,CACV,SAAS,CAAE,MAAM,CACjB,KAAK,CAAE,KAAK,AAEd,CAAC,AAED,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,OAAO,CACf,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,EAAE,CACjB,gBAAgB,CAAE,MAAM,CACxB,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,OAAO,AACpB,CAAC;ACxID,OAAO,eAAC,CAAC,AACP,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,IAAI,AACrB,CAAC;ACHD,OAAO,eAAC,CAAC,AACP,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,IAAI,AACrB,CAAC;ACuBD,eAAe,cAAC,CAAC,AAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,KAAK,AAGb,CAAC,AAED,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,aAAa,cAAC,CAAC,AACb,KAAK,CAAE,MAAM,CACb,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,IAAI,CACf,eAAe,CAAE,IAAI,AAIvB,CAAC,AACD,WAAW,cAAC,CAAC,AACX,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CACxB,gBAAgB,CAAE,KAAK,CACvB,aAAa,CAAE,EAAE,CACjB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,MAAM,CACjB,cAAc,CAAE,KAAK,AACvB,CAAC,AACD,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,IAAI,AACf,CAAC,AAED,iBAAiB,cAAC,CAAC,AACjB,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,EAAE,CACd,MAAM,CAAE,OAAO,AAEjB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,OAAO,CACf,gBAAgB,CAAE,MAAM,CACxB,MAAM,CAAE,IAAI,AACd,CAAC"
}