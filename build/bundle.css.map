{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../NavBar.svelte",
    "../../NewEventForm.svelte",
    "../../UpcomingEvents.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport NavBar from './components/NavBar.svelte'\n\timport About from './components/About.svelte'\n\timport NewEventForm from './components/NewEventForm.svelte'\n\timport UpcomingEvents from './components/UpcomingEvents.svelte'\n\t// export let name;\n\timport { Router, Link, Route } from \"svelte-routing\";\n\texport let url = '';\n\timport ApolloClient from \"apollo-boost\";\n\timport { setClient } from \"svelte-apollo\";\n\t\n\t// apollo set up\n\n\tconst client = new ApolloClient({\n\t\turi: \"http://localhost:3000/graphql\",\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log(\"graphQLErrors\", graphQLErrors);\n      console.log(\"networkError\", networkError);\n    }\n\t});\n\n  setClient(client);\n\n// standard fetch call \n\n\t// fetch('http://localhost:3000/graphql', {\n\t// \tmethod: 'POST',\n\t// \t// mode: 'no-cors',\n\t// \theaders: { 'Content-Type': 'application/json' },\n\t// \tbody: JSON.stringify({ query: '{ users { email } }' }),\n\t// })\n\t// \t.then(res => {\n\t// \t\tconsole.log('response:', res)\n\t// \t\treturn res.json()\n\t// \t\t})\n\t// \t.then(data => console.log('data:', data));\n\n</script>\n\n<Router url={url}>\n\t<main>\n\t\t<NavBar />\n\t\t<Route path='add-event' component={NewEventForm} />\n\t\t<!-- <Route path='add-event' component={UpcomingEvents} /> -->\n\t\t<UpcomingEvents />\n\t</main>\n</Router>\n\n<style>\n  @import url('https://fonts.googleapis.com/css2?family=Do+Hyeon&display=swap');\n  * {\n    font-family: 'Do Hyeon', sans-serif;\n  }\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n\n</style>",
    "<script>\n  import { Router, Link, Route } from \"svelte-routing\";\n  import { getClient, query, mutate } from \"svelte-apollo\";\n  import { gql } from \"apollo-boost\";\n\n  const GETUSERS = gql`\n    { users { email } }\n  `;\n\n  const client = getClient();\n  const userOp = query(client, {query: GETUSERS});\n  \n</script>\n\n\n<nav>\n  <Link class='home-btn' to=''><h1>REF365</h1></Link>\n  <Link to='add-event'>Add New Event</Link>\n</nav>\n \n<style>\n  nav {\n    border: 2px solid black;\n    border-radius: 1rem;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem;\n  }\n\n \n\n</style>\n \n \n   <!-- {#await $userOp}\n    <p>.. loading</p>\n  {:then data}\n\n    {#each data.data['users'] as user, i}\n      <p>{user.email}</p>\n    {/each}\n\n  {:catch e}\n    {e}\n  {/await} -->",
    "<script>\n// imports\n  import ApolloClient from \"apollo-boost\";\n  import { gql } from \"apollo-boost\";\n  import { setClient, getClient, mutate, query } from \"svelte-apollo\";\n// component variables and props\n  let title;\n  let notes;\n  let date;\n  let time;\n  let mileage;\n  let payment;\n  let userId = 2;\n// methods\n  const client = getClient();\n\n  const ADDEVENT = gql`\n    mutation($title: String!, \n             $userId: ID!,\n             $notes: String!,\n             $date: String!,\n             $time: String!,\n             $payment: Float!\n             $mileage: Float!,\n              ){\n      createEvent(input: {\n        userId: $userId,\n        title: $title,\n        notes: $notes,\n        date: $date,\n        time: $time,\n        mileage: $mileage,\n        income: $payment\n      }) {\n        event {\n           id\n           title\n           notes\n           date\n           time\n           mileage\n           income\n        }\n        errors\n      }\n}\n  `;\n\n  const addEvent = () => {\n   const eventAdd = mutate(client, {\n      mutation: ADDEVENT,\n      variables: {\n        userId,\n        title, \n        notes, \n        date, \n        time,\n        mileage,\n        payment\n      }\n    })\n      .then(data => {\n        console.log(data)\n      })\n      .catch(e => {\n        console.error(\"error: \", e);\n      });\n  }\n</script>\n\n<form on:submit|preventDefault={addEvent}>\n  <label for='event-title'>Event Title</label>\n    <input bind:value={title} class='event-title' type='text'>\n  <label for='mileage'>Mileage</label>\n    <input bind:value={mileage} type='number'>\n  <label for='date'>Date & Time</label>\n    <input bind:value={date} class='date' type='date'>\n    <input bind:value={time} type='time' >\n  <label for='payment'>Payment</label>\n    <input bind:value={payment} placeholder='$' class='payment' type='number' >\n  <label for='notes'>Notes</label>\n    <input class='notes-input' bind:value={notes} type='text'>\n  <button>Create New Event</button> \n</form>\n\n\n<style>\n  form {\n    padding: 1rem;\n    width: 50%;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n  }\n\n  input {\n    border: .1rem solid black;\n    width: 60%;\n    height: 3rem;\n  }\n\n  .notes-input {\n    height: 6rem;\n  }\n  \n  label {\n    width: 60%;\n    font-size: 1.5rem;\n  }\n\n  button {\n    width: 60%;\n    cursor: pointer;\n    border-radius: 5%;\n    background-color: lightcoral\n  }\n</style>",
    "<script>\n  import ApolloClient from \"apollo-boost\";\n  import { gql } from \"apollo-boost\";\n  import { setClient, getClient, mutate, query } from \"svelte-apollo\";\n  let userId = 2;\n\n  const client = getClient();\n  const GETEVENTS = gql`\n      {\n        user(id: ${userId}) {\n          events {\n            date\n            title\n            time\n          }\n        }\n      }\n    `;\n const eventQuery = query(client, {query: GETEVENTS});\n\n</script>\n\n<section class='card-container'>\n  <h2>this is the (unstyled) upcoming events section</h2>\n   {#await $eventQuery}\n    <p>.. loading</p>\n  {:then data}\n\n    {#each data.data.user.events as event, i}\n    <section class='event-card'>\n      <p>{event.title}</p>\n      <p>{event.date}</p>\n    </section>\n    {/each}\n\n  {:catch e}\n    {e}\n  {/await}\n</section>\n\n<style>\n  .card-container {\n   border: 3px solid green;\n   padding: 2rem;\n   display: flex;\n   flex-direction: column;\n   justify-content: space-around;\n   align-content: center;\n  }\n  .event-card {\n    border: 3px solid yellow;\n    width: 75%;\n    margin: 1rem;\n  }\n\n</style>"
  ],
  "names": [],
  "mappings": "AAiDE,QAAQ,IAAI,gEAAgE,CAAC,CAAC,AAC9E,eAAE,CAAC,AACD,WAAW,CAAE,UAAU,CAAC,CAAC,UAAU,AACrC,CAAC,AACF,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AASD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;AClDA,GAAG,cAAC,CAAC,AACH,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,IAAI,AACf,CAAC;AC0DD,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,UAAU,AAC7B,CAAC,AAED,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CACzB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,AACd,CAAC,AAED,YAAY,cAAC,CAAC,AACZ,MAAM,CAAE,IAAI,AACd,CAAC,AAED,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,GAAG,CACV,SAAS,CAAE,MAAM,AACnB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,OAAO,CACf,aAAa,CAAE,EAAE,CACjB,gBAAgB,CAAE,UAAU;EAC9B,CAAC;AC1ED,eAAe,cAAC,CAAC,AAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,YAAY,CAC7B,aAAa,CAAE,MAAM,AACtB,CAAC,AACD,WAAW,cAAC,CAAC,AACX,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CACxB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,AACd,CAAC"
}